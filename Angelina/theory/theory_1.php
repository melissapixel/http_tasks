<?= иди нахуй ?>
<!-- Запросы и ответы в протоколе HTTP -->
<!-- Пусть пользователь хочет открыть в браузере некоторую страницу некоторого сайта. Для этого пользователь либо переходит по некоторой ссылке либо вбивает URL страницу в адресную страницу браузера. При этом оба способа технически эквивалентны. -->

<!-- После этого браузер отправляет серверу запрос (англ. request), в котором просит сервер отдать страницу по указанному URL. Сервер получает запрос браузера, формирует ответ (англ. response) и отправляет его назад в браузер. -->

<!-- Запрос и ответ представляют собой просто строки, оформленные специальным образом. Правила оформления этих строк и регулирует протокол HTTP. -->

<!-- Таким образом все взаимодействие клиента и сервера сводится к перебрасыванию сообщений, подобно мячикам в игре пинг-понг. -->

<!-- При этом инициация запроса обязательна. Это значит, что сервер всегда шлет ответ на запрос браузера. Не может быть такого, что сервер что-то пошлет браузеру сам, без предваряющего запроса браузера. -->


<!-- Отсутствие состояния в протоколе HTTP
Протокол HTTP не содержит прямой возможности сделать так, чтобы сервер запомнил нас. Это значит, когда вы видите в браузере загруженную страницу, в этот момент сервер уже давно обработал наш запрос, сразу же забыв про нас.

При этом при получении запросов сервер не может отличить, отправлены ли эти запросы одним клиентом или разными. То есть перемещаясь по страницам сайта при открытии каждой новой страницы сервер не знает, совершали ли мы какие-либо действия на сайте или еще нет.

В реальной жизни, как вы знаете из личного опыта, сайты запоминают нас. Мы можем авторизоваться на сайте, складывать товары в интернет магазине и так далее. Это делается с помощью специальных обходных путей, позволяющих серверу различать клиентов. Эти пути мы будем изучать в дальнейшем. -->



<!-- Структура HTTP сообщений
Итак, клиент и сервер обмениваются друг с другом сообщениями, оформленными специальным образом. Давайте рассмотрим структуру этих сообщений.

Каждое HTTP сообщение состоит из трех частей, которые передаются в указанном порядке: стартовая строка (англ. starting line), заголовки (англ. headers) и тело сообщения (англ. message body).

Технически стартовая строка является первой строкой сообщения, затем на каждой новой строке размещается по одному заголовку, затем идет пустая строка и после нее размещается тело запроса.

При этом стартовая строка определяет тип сообщения, заголовки характеризуют тело сообщения, параметры передачи и прочие сведения, а тело содержит непосредственно данные сообщения.

Стартовая строка и заголовки являются обязательными элементами, а тело - нет. При этом стартовые строки различаются для запроса и ответа.

В следующих уроках мы отдельно разберем каждую часть HTTP сообщения. -->

<!-- Стартовая строка HTTP запроса
Строка запроса состоит из следующих частей, разделенных пробелом: из метода запроса, URI запрошенной страницы, версии протокола HTTP.

Метод запроса указывает, хотим мы что-то получить с сервера или, наоборот, что-то передать на сервер. Как правило, используются два метода - GET для получения и POST для отправки данных.

URI запрошенной страницы содержит адрес страницы, которую хочет получить браузер. URI отличается от URL тем, что не содержит имени домена (оно в протоколе HTTP передается отдельно).

Версия протокола указывается следующим образом: сначала буквы HTTP, потом слеш, а потом собственно версия.

Давайте напишем пример стартовой строки HTTP запроса для получения страницы: -->
<?php
    GET /page/test HTTP/1.1
?>
<!-- А теперь пример запроса для отправки данных: -->
<?php
    POST /page/test HTTP/1.1
?>


<!-- Методы HTTP запросов
Самыми частыми методами HTTP запросов являются методы GET и POST. Давайте рассмотрим эти методы подробнее, а также изучим другие, более редкие методы. Описание других методов достаточно общее. Дело в том, что эти методы имеют широкое применение и протокол HTTP указывает лишь их общее предназначение. Итак, вот описание методов: -->

<!-- Метод GET - основной метод, используемый чаще всего. Он применяется для простого получения страниц. -->

<!-- Метод POST применяется для передачи пользовательских данных. Например, посетитель сайта хочет оставить комментарий к статье. В этом случае клиент должен осуществить запрос методом POST. При этом комментарий пользователя будет отправлен в теле запроса. А сервер сохранит этот комментарий и в ответ отдаст страницу статьи, в которой будут все оставленные ранее комментарии и наш новый. Также с помощью метода POST обычно загружаются файлы на сервер. -->

<!-- Метод HEAD запрашивает страницу так же, как и метод GET, но в ответ получает только заголовки, без тела ответа. -->

<!-- Метод DELETE явно указывает серверу, что клиент хочет удалить данные, хранящиеся на сервере для данного URI. -->

<!-- Метод PATCH явно указывает серверу, что клиент хочет изменить данные, хранящиеся на сервере для данного URI. -->

<!-- Метод PUT явно указывает серверу, что клиент хочет загрузить данные на сервер для данного URI.
Фундаментальное различие методов POST и PUT заключается в понимании предназначений указанных URI. Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя PUT клиент предполагает, что загружаемое содержимое соответствует находящемуся по заданному URI ресурсу. -->

<!-- В реальной жизни сервера хорошо поддерживают только методы GET и POST. Поэтому метод GET используется как для получения данных, так и для их удаления и изменения. А метод POST используется как для загрузки данных для их обработки, так и для изменения и удаления данных. -->

<!-- Стартовая строка HTTP ответа
Строка ответа состоит из следующих частей, разделенных пробелом: версии протокола HTTP, кода состояния и пояснения состояния.

Код состояния (англ. status code) указывает, был ли успешен запрос или случилась ошибка. Этот код состоит из трех цифр. Для примера, код 200 символизирует успех, а код 404 указывает клиенту, что страница по данному URL не найдена.

Пояснение состояния (англ. reason phrase) представляет собой короткий текст, описывающий код состояния. Оно предназначено для чтения человеком и никак не влияет на сообщение и не является обязательным. Например, для 404 кода пояснением будет Not Found (рус. Не Найдено).

Давайте напишем пример стартовой строки HTTP ответа для успеха: -->
<?php
    HTTP/1.1 200 OK
?>
<!-- А теперь пример ответа для ошибки: -->
<?php
    HTTP/1.1 404 Not Found
?>


<!-- Группы кодов состояний HTTP ответа

Коды состояний ответа сгруппированы в зависимости от результата. При этом группа определяется первой цифрой номера кода. Давайте изучим эти группы: -->
<!-- 1xx	Коды, начинающиеся на 1, представляют собой информационные сообщения от сервера о процессе передачи данных.

2xx	Коды, начинающиеся на 2, представляют собой сообщения об успехе.

3xx	Коды, начинающиеся на 3, сообщают клиенту, что для успешного выполнения операции необходимо сделать другой запрос по другому URI. То есть сервер таким кодом ответа заставляет браузер выполнить редирект на другой адрес.

4xx	Коды, начинающиеся на 4, сообщают, что на сервере произошла ошибка по вине клиента.

5xx	Коды, начинающиеся на 5, сообщают, что на сервере произошла ошибка по вине сервера. -->

<!-- HTTP заголовки

После стартовой строки передаются HTTP заголовки. Заголовки задают дополнительные параметры HTTP сообщения. Технически каждый заголовок должен начинаться с новой строки. А когда все заголовки перечислены, должна следовать пустая строка и тело HTTP сообщения.

Каждый заголовок состоит из имени и значения. Они разделяются двоеточием. Давайте посмотрим на примеры заголовков: -->
<?php
    Content-Type: text/html;charset=utf-8
    Content-Language: ru
    Last-Modified: Sat, 16 Jan 2020 
        21:16:42 GMT 
?>

<!-- Группы HTTP заголовков
Все заголовки разделяются на четыре основные группы: общие заголовки (General Headers), заголовки запроса (Request Headers), заголовки ответа (Response Headers), заголовки сущности (Entity Headers).

Общие заголовки
Общие заголовки применяются как к запросам, так и к ответам, но не имеют отношения к данным, передаваемым в теле.

Заголовки запроса
Заголовки запроса содержит больше информации о ресурсе, который нужно получить, или о клиенте, запрашивающем ресурс.

Заголовки ответа
Заголовки ответа содержат дополнительную информацию об ответе, например его местонахождение, или о сервере, предоставившем его.

Заголовки сущности
Заголовки сущности содержат информацию о теле ресурса, например его длину содержимого или тип. Сюда относятся заголовки Content-Type и Content-Length. -->




<!-- Полезные HTTP заголовки
В данном уроке мы рассмотрим значения некоторых полезных заголовков.

Заголовок Host
Заголовок Host содержит в себе имя домена, на который осуществляется запрос: -->
<?php
    Host: example.com
?>
<!-- Вместе со стартовой строкой, содержащей URI, и заголовком Host, содержащим имя домена, получается URL запрошенной страницы: -->
 <?php
    GET /test/ HTTP/1.1
    Host: example.com
 ?>


<!-- Заголовок Date
Заголовок Date содержит в себе момент времени, в который было создано HTTP сообщение: -->
<?php
    Date: Wed, 21 Oct 2020 07:28:00 GMT
?>

<!-- Заголовок Last-Modified
Заголовок Last-Modified в ответе HTTP содержит дату и время, в которую, по мнению сервера, запрашиваемый ресурс был изменён. Он используется в качестве средства проверки для определения того, остался ли ресурс неизменным. Пример: -->
<?php
    Last-Modified: Sat, 16 Jan 2020 
	21:16:42 GMT 
?>
<!-- Заголовок Content-Type
Заголовок Content-Type задает тип отданного содержимого и его кодировку: -->
<?php
    Content-Type: text/html; charset=utf-8
?>

<!-- Заголовок Content-Language -->
<!-- Заголовок Content-Language задает язык, на котором написан отданный документ: -->
<?php
    Content-Language: ru
?>

<!-- Заголовок Content-Length
Заголовок Content-Length указывает размер отправленного получателю тела объекта в байтах: -->
<?php
    Content-Length: 10000
?>



<!-- Свои HTTP заголовки
Можно вводить свои HTTP заголовки. Традиционно к именам таких дополнительных заголовков добавляют префикс X- для избежания конфликта имён с возможно существующими.

Одним из популярных заголовков такого типа является X-Powered-By. Он указывает платформу приложений, на которой работает сервер. К примеру, это может быть "PHP" или "Express". -->



<!-- Тело HTTP сообщения
После HTTP заголовков размещается тело сообщения. Оно, собственно, и содержит данные, которые передаются в HTTP запросе. Эти данные могут содержать HTML текст страницы, CSS текст файла со стилями, двоичные данные картинки и так далее.

Для примера давайте посмотрим на содержимое HTTP сообщения: -->
                    HTTP/1.1 200 OK
                    Connection: Keep-Alive
                    Content-Encoding: gzip
                    Content-Length: 2263
                    Content-Type: text/html; charset=UTF-8
                    Date: Tue, 27 Sep 2022 13:04:13 GMT
                    Keep-Alive: timeout=5, max=100
                    Server: Apache/2.4.46 (Ubuntu)
                    Vary: Accept-Encoding

                    <!DOCTYPE html>
                    <html>
                        <head>
                            <meta charset="utf-8">
                            <title></title>
                        </head>
                        <body>
                            text
                        </body>
                    </html>




 <!-- Автоматические HTTP запросы браузера
Пусть вы с помощью браузера заходите на некоторую страницу некотрого сайта: -->
<?php
    GET /test.html HTTP/1.1
    Host: example.com
?>
<!-- Пусть своим результатом запрос возвращает следующий HTML код: -->
                    <!DOCTYPE html>
                    <html>
                        <head>
                            <meta charset="utf-8">
                            <title></title>
                            <link rel="stylesheet" href="styles.css">
                            <script src="scripts.js"></script>
                        </head>
                        <body>
                            <img src="images/img.png">
                        </body>
                    </html>
<!-- На этом работа браузера не заканчивается, ведь пока загружен только HTML код, а этого мало для показа страницы. После загрузки HTML браузер анализирует его и видит, что в коде присутствуют подключения стилей, скриптов, картинок. В этот момент браузер сам, автоматически отправляет запросы на сервер.

При этом для каждого ресурса формируется отдельный HTTP запрос. То есть, к примеру, для каждого подключенного файла CSS будет отправлен отдельный запрос. -->


<!-- Затраты на HTTP запросы

Каждый HTTP запрос отнимает время. Поэтому один CSS файл будет грузится быстрее, чем несколько CSS файлов, даже если их суммарный размер будет одинаковым.

Поэтому для увеличения быстродействия все CSS файлы объединяют в один общий файл и все JavaScript файлы объединяют в один общий файл. Это делается с помощью сборщиков, например, Gulp или Webpack. -->
<!-- Мелкие картинки также объединяют в одну. Такая общая картинка называется спрайтом. -->


<!-- HTTP сообщения в отладчике браузера

В отладчике браузера можно посмотреть на HTTP запросы и ответы своими глазами. Для этого в нем необходимо перейти на вкладку "Network" и после этого обновить страницу. Лучше всего это делать в браузере Chrome.

В этой вкладке можно посмотреть список загруженных файлов, выполнить фильтрацию по каждому типу файлов, а также посмотреть HTTP заголовки запроса и ответа. -->

