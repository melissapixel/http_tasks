<!-- HTTP редиректы
Когда клиент обращается к серверу по определенному URL сервер может выполнить перенаправление, отдав статус-код, начинающийся с тройки.

Когда клиент получает ответ перенаправления, он использует новый предоставленный URL и немедленно загружает его. Адрес, на который нужно выполнить переход, указывается в HTTP заголовке Location.

Давайте посмотрим на примере. Пусть клиент делает следующий запрос: -->
<?php
    GET /page.html HTTP/1.1
?>
<!-- Пусть сервер отдает в ответ перенаправление: -->
<?php
    HTTP/1.1 301 OK
    Location: /test.html
?>

<!-- 
Источник Referer в протоколе HTTP
Заголовок Referer содержит URL источника запроса. Если перейти с одной страницы на другую, Referer будет содержать адрес первой страницы.

Часто на сайтах устанавливается программное обеспечение, анализирующее Referer и извлекающее из него различную информацию. Так, например, владелец сайта получает возможность узнать, по каким поисковым запросам, как часто и на какие именно страницы попадают люди.

Если HTTP-клиент загружает с сервера картинку, представленную на какой-либо странице, то Referer будет содержать адрес этой страницы. Некоторые серверы перед выдачей картинки анализируют Referer и не показывают картинку, если запрос приходит с другого сайта (а, например, показывают маленькое изображение-заглушку). -->



<!-- User Agent в протоколе HTTP

Термином User Agent называют программу, которая скачивает с сервера страницу сайта. Как правило, этой программой является браузер. Но не всегда - есть и другие программы, которые получают страницы сайтов. Например, поисковые роботы которые анализируют текст страницы и показывают сайт в поиске.

Программы, обращающиеся к серверу как правило передают специальный заголовок User-Agent, содержащий название программы, операционную систему компьютера и язык пользователя.

Общий формат заголовка для браузеров выглядит так: -->
<?php
    User-Agent: Mozilla/5.0 (system-information) platform 
?>
<!-- Как вы видите, для любого браузера значение заголовка начинается с Mozilla/5.0. Так нужно по историческим причинам.

Пример значения заголовка в браузере Firefox под Windows: -->
<?php
    Mozilla/5.0 (Windows NT 6.1; Win64; 
	x64; rv:47.0) Gecko/20100101 Firefox/47.0 
?>
<!-- Пример значения заголовка в браузере Firefox под MAC-ось: -->
<?php
    Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0
?>
<!-- Пример значения заголовка в браузере Chrome под Linux: -->
<?php
    Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36
?>
<!-- Пример значения заголовка у робота Google: -->
Mozilla/5.0 (compatible; Googlebot/2.1; 
    +http://www.google.com/bot.html)


    <!-- Протокол HTTPS
В протоколе HTTP данные между пользователями передаются в открытом виде. Это значит, что злоумышленник может вмешаться в передачу данных, перехватить их или изменить.

Поэтому для защиты данных был создан специальный защищенный протокол HTTPS. Технически он является расширением протокола HTTP, в котором данные передаются в зашифрованном виде. -->


<!-- GET параметры в протоколе HTTP
В протоколе HTTP в URI сайта можно передавать дополнительные параметры. Такие параметры называются GET параметрами, а сама строка параметров называется Query String.

Наличие GET параметров не изменяет адрес страницы. Вы будете попадать на ту же страницу, но с параметрами, которые будут разобраны сервером.

Для передачи параметров после адреса страницы ставится знак вопроса и через амперсанд & перечисляются параметры в формате имя=значение. Смотрите пример: -->
<?php
    GET /page/?param1=value1¶m2=value2 HTTP/1.1
?>


// Отправка форм методом GET в протоколе HTTP
// Через язык HTML на сайте можно создавать формы, в которые пользователь может вводить данные. В атрибуте action формы указывается URI, на который будет отправлена форма, а в атрибуте method - имя HTTP метода отправки.

// Метод отправки может быть либо GET, либо POST. Другие HTTP методы для форм браузерами не поддерживаются.

// Давайте сделаем форму, которая будет отправляться методом GET
                    <form action="/page/" method="GET">
                        <input name="test1" value="1">
                        <input name="test2" value="2">
                        
                        <input type="submit">
                    </form>
// После нажатия на кнопку отправки будет выполнен следующий HTTP запрос, содержащий данные формы:
<?php
    GET /page/?test1=value1&test2=2 HTTP/1.1
?>


// Отправка форм методом POST в протоколе HTTP
// Давайте теперь отправим форму методом POST. Укажем соответствующее значение атрибуту method:
                    <form action="/page/" method="POST">
                        <input name="test1">
                        <input name="test2">
                        
                        <input type="submit">
                    </form>
// После нажатия на кнопку отправки будет выполнен следующий HTTP запрос:
<?php
    POST /page/ HTTP/1.1
?>
// Как вы видите, при отправке этим методом, URI запроса не будет содержать данные формы. Эти данные будут содержаться в теле запроса в виде Query String:
<?php
    // test1=value1&test2=2
?>



// MIME типы в протоколе HTTP
// MIME типы позволяют указывать тип получаемого файла, чтобы браузер мог правильно его обработать.

// Например, браузер должен понимать, что в полученном файле лежит CSS, либо картинка и интерпретировать их соответствующим образом.

// Конечно же, чаще всего эту информацию можно получить по расширению файла. Например, очевидно, что в файле с расширением .css лежат CSS стили. Но браузеру будет проще, если тип содержимого будет указан явно.

// Указание MIME типа в протоколе HTTP осуществляется в заголовке Content-Type. Давайте рассмотрим самые популярные варианты.

// Содержимое - HTML код:
<?php
    Content-Type: text/html
?>


// AJAX запросы в HTTP
// Технология AJAX позволяет загружать часть страницы с сервера, не перезагружая ее целиком.

// Эта технология работает через JavaScript. По какому-то событию, например, по нажатию на кнопку, браузер отправляет HTTP запрос на сервер, запрашивая часть страницы в виде HTML кода, либо данные в формате JSON. После того, как сервер пришлет ответ, браузер отобразит новые данные в заданном блоке.

// В отладчике браузера можно посмотреть на AJAX запросы своими глазами. Для этого на вкладке "Server" следует выбрать фильтр fetch/xhr.


// Cookie в HTTP
// Куки представляют собой небольшой текст, который сервер может сохранять в браузере пользователя. Сервер может установить несколько кук с разными именами.

// С помощью кук сервер может идентифицировать пользователя и хранить данные каждого клиента между его запросами.

// Куки передаются между клиентом и сервером с помощью HTTP заголовков (запомните, это важно). При каждом запросе браузера на сервер браузер будет отправлять все куки данного сайта на сервер.

// С помощью заголовка Cookie клиент отправляет куки на сервер при каждом запросе:
<?php
    Cookie: name=john
?>
// Если кука была установлена не одна, то клиент отправит их все в одном заголовке, разделив их точкой с запятой:
<?php
    Cookie: name=john;surn:smit
?>
// С помощью заголовка Set-Cookie сервер может установить куку с нужным именем и значением:
<?php
    Set-Cookie: name=john
?>



// Сессия в HTTP
// На основе кук работают сессии. Сессии позволяют серверу запоминать клиента и хранить для него информацию.

// Например, посетитель сайта может складывать товары в корзину магазина. И после перезагрузки страницы сервер идентифицирует клиента и покажет ему товары, которые были отложены в этом браузере.

// Давайте разберемся, как это работает. Как вы уже знаете, протокол HTTP не хранит состояние в том смысле, что сервер не может отличить от какого клиента поступил запрос. Поэтому в данном случае используется обходной путь.

// Его суть заключается в следующем. При первом обращении клиента сервер устанавливает ему куку со случайной уникальной строкой. Эта кука называется сессионной и обычно имеет имя sessid.

// Сервер также хранит у себя список всех сессионных кук и привязывает к ним нужные данные. Например, список выбранных товаров в магазине.

// При следующем обращении клиента он будет отсылать на сервер сессионную куку и сервер идентифицирует его по этой куке и сможет получить данные, которые сохранены на сервере для данного клиента.

// API через HTTP
// В интернете часто делают специальные сервисы, раздающие некоторую информацию всем желающим. К примеру, сервисы погоды или сервисы курсов валют. Эти сервисы для доступа к данным предоставляют API. Под API подразумевают набор URL, к которым можно обращаться для получения данных.
https://belarusbank.by/ru/33139/forDevelopers/api/kursinfo

